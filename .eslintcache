[{"/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/index.js":"1","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/App.js":"2","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/reportWebVitals.js":"3","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/App.Config.js":"4","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/components/Header.js":"5","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/pages/Home.js":"6","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/libs/web3/index.js":"7","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/components/Button.js":"8","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/libs/erc20/erc20.js":"9","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/libs/web3/network.js":"10","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/libs/web3/account.js":"11","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/util/helpers.js":"12","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/libs/web3/util.js":"13"},{"size":500,"mtime":1613040900684,"results":"14","hashOfConfig":"15"},{"size":703,"mtime":1613040900682,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1613040900687,"results":"17","hashOfConfig":"15"},{"size":144,"mtime":1613040900681,"results":"18","hashOfConfig":"15"},{"size":825,"mtime":1613040900683,"results":"19","hashOfConfig":"15"},{"size":3015,"mtime":1614255942512,"results":"20","hashOfConfig":"15"},{"size":468,"mtime":1613040900685,"results":"21","hashOfConfig":"15"},{"size":908,"mtime":1613040900683,"results":"22","hashOfConfig":"15"},{"size":1758,"mtime":1614254980275,"results":"23","hashOfConfig":"15"},{"size":1217,"mtime":1613040900686,"results":"24","hashOfConfig":"15"},{"size":2780,"mtime":1613040900685,"results":"25","hashOfConfig":"15"},{"size":462,"mtime":1613040900688,"results":"26","hashOfConfig":"15"},{"size":1116,"mtime":1613040900686,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"10q1frt",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/index.js",[],["58","59"],"/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/App.js",[],"/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/reportWebVitals.js",[],"/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/App.Config.js",[],"/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/components/Header.js",[],"/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/pages/Home.js",["60","61","62","63"],"/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/libs/web3/index.js",[],"/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/components/Button.js",[],"/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/libs/erc20/erc20.js",["64","65","66"],"import { useEffect, useState, createContext, useContext } from \"react\";\nimport { useNetwork } from \"../web3\";\nimport ERC20ABI from \"./erc20.json\";\n\nconst Context = createContext({});\n\nconst useContract = () => useContext(Context);\n\nconst Provider = ({ children }) => {\n  // Here we use our hooks to get access to some juicy stuff\n  let { web3 } = useNetwork();\n  let [contract, setContract] = useState();\n  const [account, setAccount] = useState(\"\");\n\n  // Initialise the contract on component mount\n  useEffect(() => {\n    if (web3) {\n      // An ethereum ABI, is simply a JSON representation of the ethereum smart contract\n      // It details all the expected usable functions\n      // To instantiate a useable contract we parse in the ABI as well as an Ethereum address.\n      // This is the address corresponding to the location of the smart contract store on ethereum\n      // The example address we gave is to the Pickle token\n      const _contract = new web3.eth.Contract(\n        ERC20ABI,\n        \"0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5\"\n      );\n      setContract(_contract);\n    }\n  }, [web3]); // eslint-disable-line\n\n  const fetchPickleBalance = async (address) => {\n    return await contract.methods.balanceOf(address).call();\n  };\n\n  const getTokens = async (address) => {\n    return await contract.methods.symbol().call();\n  };\n\n  const getAccount = async () => {\n    const accounts = await web3.eth.getAccounts();\n    return accounts[0];\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        // expose more methods here to interact with the contract\n        fetchPickleBalance,\n        getTokens,\n        getAccount,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport default {\n  Provider,\n  useContract,\n};\n","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/libs/web3/network.js",["67"],"import { useEffect, useState, createContext, useContext } from 'react'\nimport { useWeb3 } from './util'\n\nconst networks = {\n\t1: 'Mainnet',\n}\n\nconst Context = createContext({});\n\nconst useNetwork = () => useContext(Context)\n\nconst Provider = ({config={}, children}) => {\n\n\tconst [network, setNetwork] = useState({})\n\tconst {web3, status} = useWeb3()\n\n\tconst fetchNetwork = () => {\n\t\tweb3.eth.getChainId().then(chainId => {\n\t\t\tconst networkConfig = config[chainId]\n\n\t\t\tif(!networks[chainId]){\n\t\t\t\tsetNetwork({\n\t\t\t\t\tid: null,\n\t\t\t\t\tname: null,\n\t\t\t\t\tstatus: 'UNKNOWN',\n\t\t\t\t})\n\t\t\t}\n\t\t\telse if(!networkConfig){\n\t\t\t\tsetNetwork({\n\t\t\t\t\tid: chainId,\n\t\t\t\t\tname: networks[chainId],\n\t\t\t\t\tstatus: 'DISABLED',\n\t\t\t\t})\n\t\t\t}else{\n\t\t\t\tsetNetwork({\n\t\t\t\t\tid: chainId,\n\t\t\t\t\tname: networks[chainId],\n\t\t\t\t\tstatus: 'ENABLED',\n\t\t\t\t\t...networkConfig,\n\t\t\t\t\tweb3: web3\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n\n\tuseEffect(() => {\n\t\tif(Object.keys(config).length && web3 && status === 'AVAILABLE'){\n\t\t\tfetchNetwork()\n\t\t\tweb3.givenProvider.on('chainChanged', fetchNetwork)\n\t\t}\n\t}, [config, web3, status]) // eslint-disable-line\n\n\treturn <Context.Provider \n\t\tvalue={{\n\t\t\t...network,\n\t\t}}\n\t\t>\n\t\t{children}\n\t</Context.Provider>\n};\n\nexport default {\n\tProvider,\n\tuseNetwork\n}","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/libs/web3/account.js",["68"],"import { useEffect, useState, createContext, useContext } from 'react'\nimport { debounce } from 'lodash'\nimport { useStatus, useWeb3 } from './util'\nimport Network from './network'\n\nconst Context = createContext({});\n\nconst StatusOptions = [\n\t'DISCONNECTED',\n\t'CONNECTING',\n\t'CONNECTED',\n\t'LOCKED',\n\t'ERROR'\n]\n\nconst useAccount = () => useContext(Context)\n\nconst Provider = ({children}) => {\t\n\tconst [address, setAddress] = useState()\n\tconst [balance, setBalance] = useState()\n\tconst [status, setStatus] = useStatus(StatusOptions, StatusOptions[0])\n\tconst [message, setMessage] = useState()\n\tconst [blockWatcher, setBlockWatcher] = useState()\n\tconst { web3, status: web3Status } = useWeb3()\n\tconst { id, status: networkStatus } = Network.useNetwork()\n\n\tconst connect = () => setStatus('CONNECTING')\n\n\tconst disconnect = msg => {\n\t\tsetStatus('DISCONNECTED')\n\t\tsetMessage(msg)\n\t}\n\n\tconst handleConnection = () => new Promise(async (resolve, reject) => {\n\t\tif(web3Status === 'AVAILABLE'){\n\t\t\tif(networkStatus === 'ENABLED'){\n\t\t\t\tconst accounts = await web3.eth.getAccounts()\n\n\t\t\t\tif(accounts[0]){\n\t\t\t\t\tsetAddress(accounts[0])\n\t\t\t\t\tresolve()\n\t\t\t\t}else{\n\t\t\t\t\tawait web3.givenProvider.request({ method: 'eth_requestAccounts' });\n\t\t\t\t\tconst _accounts = await web3.eth.getAccounts()\n\t\t\t\t\tsetAddress(_accounts[0])\n\t\t\t\t\tresolve()\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tdisconnect(`Network not configured`)\n\t\t\t\treject()\n\t\t\t}\n\t\t}else{\n\t\t\tdisconnect(`Metamask ${web3Status}`)\n\t\t\treject()\n\t\t}\n\t})\n\n\tconst fetchBalance = async () => {\n\t\tconst bal = await web3.eth.getBalance(address)\n\t\tsetBalance(bal)\n\t}\n\n\tuseEffect(() => {\n\t\tswitch (status) {\n\t\t\tcase 'DISCONNECTED':\n\t\t\t\tsetAddress(null)\n\t\t\t\tsetBalance()\n\t\t\t\tbreak;\n\t\t\tcase 'CONNECTING':\n\t\t\t\thandleConnection()\n\t\t\t\t\t.then(() => setStatus('CONNECTED'))\n\t\t\t\t\t.catch(() => {})\n\t\t\t\tbreak;\n\t\t\tcase 'CONNECTED':\n\t\t\t\tfetchBalance()\n\n\t\t\t\tblockWatcher && blockWatcher.unsubscribe()\n\t\t\t\tconst sub = web3.eth.subscribe('newBlockHeaders').on(\"data\", debounce(fetchBalance, 500))\n\t\t\t\tsetBlockWatcher(sub)\n\t\t\t\tbreak;\n\t\t\tcase 'ERROR':\n\t\t\tdefault:\n\t\t\t\tsetStatus('DISCONNECTED')\n\t\t\t\tbreak;\n\t\t}\n\t}, [status]) // eslint-disable-line\n\t\n\n\t// on network ID change\n\tuseEffect(() => {\n\t\tif(id && networkStatus === 'ENABLED' && status === 'CONNECTED'){\n\t\t\tconnect()\n\t\t}else{\n\t\t\tdisconnect(networkStatus !== 'ENABLED' && `Network not configured`)\n\t\t}\n\t}, [id, networkStatus]) // eslint-disable-line\n\n\t// once we have web3, watch for events\n\tuseEffect(() => {\n\t\tif(web3?.version){\n\t\t\tweb3.givenProvider.on('accountsChanged', connect)\n\t\t}\n\t}, [web3?.version, status]) // eslint-disable-line\n\n\treturn <Context.Provider \n\t\tvalue={{\n\t\t\taddress,\n\t\t\tbalance,\n\t\t\tstatus,\n\t\t\tmessage,\n\t\t\tconnect,\n\t\t\tdisconnect\n\t\t}}\n\t\t>\n\t\t{children}\n\t</Context.Provider>\n}\n\nexport default {\n\tProvider,\n\tuseAccount\n}","/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/util/helpers.js",[],"/Users/kalebday/Desktop/projects/Mycelium/example-dapp/src/libs/web3/util.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":10,"column":31,"nodeType":"75","messageId":"76","endLine":10,"endColumn":40},{"ruleId":"73","severity":1,"message":"77","line":14,"column":10,"nodeType":"75","messageId":"76","endLine":14,"endColumn":16},{"ruleId":"73","severity":1,"message":"78","line":14,"column":18,"nodeType":"75","messageId":"76","endLine":14,"endColumn":27},{"ruleId":"73","severity":1,"message":"79","line":16,"column":18,"nodeType":"75","messageId":"76","endLine":16,"endColumn":27},{"ruleId":"73","severity":1,"message":"80","line":13,"column":10,"nodeType":"75","messageId":"76","endLine":13,"endColumn":17},{"ruleId":"73","severity":1,"message":"81","line":13,"column":19,"nodeType":"75","messageId":"76","endLine":13,"endColumn":29},{"ruleId":"82","severity":1,"message":"83","line":58,"column":1,"nodeType":"84","endLine":61,"endColumn":3},{"ruleId":"82","severity":1,"message":"83","line":62,"column":1,"nodeType":"84","endLine":65,"endColumn":2},{"ruleId":"82","severity":1,"message":"83","line":119,"column":1,"nodeType":"84","endLine":122,"endColumn":2},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'getTokens' is assigned a value but never used.","Identifier","unusedVar","'tokens' is assigned a value but never used.","'setTokens' is assigned a value but never used.","'setWallet' is assigned a value but never used.","'account' is assigned a value but never used.","'setAccount' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]